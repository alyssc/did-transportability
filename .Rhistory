}
results <- rbind(results, rowMeans(y_singlesims))
}
return(y)
}
vary_param_plot <- function(default_params,var_name,var_seq,nsim){
x <- var_seq
results <- data.frame(
psi.2 = numeric(),
true_patt = numeric(),
gcomp = numeric(),
ipw = numeric(),
dr = numeric()
)
for (i in 1:length(x)){
default_params[var_name] <- x[i]
y_singlesims <- matrix(NA, nrow = nsim, ncol = 5)
for (j in 1:nsim){
df <- make_regions(default_params)
y_singlesims[j,] <- c(x[i],true_patt(df),estimate_patt(df))
}
results <- rbind(results, rowMeans(y_singlesims))
}
return(results)
}
y <- vary_param_plot(global_params, "psi.1", seq(-.1,.1,.1),nsim = 5)
y
var_seq <- seq(-.1,.1,.1)
var_seq
x <- seq(-.1,.1,.1)
i <-1
default_params[var_name] <- x[i]
default_params <- global_params
var_name <- "psi.1"
x <- seq(-.1,.1,.1)
nsim <- 5
i <-1
default_params[var_name] <- x[i]
default_params
y_singlesims <- data.frame(
psi.1 = numeric(),
true_patt = numeric(),
gcomp = numeric(),
ipw = numeric(),
dr = numeric()
)
for (j in 1:nsim){
df <- make_regions(default_params)
y_singlesims <- rbind(data.frame(x[i],true_patt(df),estimate_patt(df)))
}
y_singlesims
df <- make_regions(default_params)
head(df)
df <- make_regions(default_params)
head(df)
for (j in 1:nsim){
df <- make_regions(default_params)
y_singlesims <- rbind(y_singlesims, data.frame(x[i],true_patt(df),estimate_patt(df)))
}
y_singlesims
true_patt(make_regions(global_params))
true_patt(make_regions(global_params))
true_patt(make_regions(global_params))
true_patt(make_regions(global_params))
for (j in 1:nsim){
df <- make_regions(default_params)
y_singlesims <- rbind(y_singlesims, data.frame(x[i],true_patt(df),estimate_patt(df)))
}
y_singlesims
y_singlesims <- data.frame(
psi.1 = numeric(),
true_patt = numeric(),
gcomp = numeric(),
ipw = numeric(),
dr = numeric()
)
for (j in 1:nsim){
df <- make_regions(default_params)
y_singlesims <- rbind(y_singlesims, data.frame(x[i],true_patt(df),estimate_patt(df)))
}
y_singlesims
c(x[i],true_patt(df),estimate_patt(df))
y_singlesims <- data.frame(
psi.1 = numeric(),
true_patt = numeric(),
gcomp = numeric(),
ipw = numeric(),
dr = numeric()
)
for (j in 1:nsim){
df <- make_regions(default_params)
y_singlesims <- rbind(y_singlesims, c(x[i],true_patt(df),estimate_patt(df)))
}
y_singlesims
rowMeans(y_singlesims)
results <- rbind(results, rowMeans(y_singlesims))
results <- data.frame(
psi.2 = numeric(),
true_patt = numeric(),
gcomp = numeric(),
ipw = numeric(),
dr = numeric()
)
results <- rbind(results, rowMeans(y_singlesims))
results
default_params[var_name] <- x[i]
y_singlesims <- matrix(NA,nrow = 0, ncol = 5)
for (j in 1:nsim){
df <- make_regions(default_params)
y_singlesims <- rbind(y_singlesims, c(x[i],true_patt(df),estimate_patt(df)))
}
y_singlesims
rowMeans(y_singlesims)
colMeans(y_singlesims)
results <- matrix(NA,nrow = 0, ncol = 5)
results <- rbind(results, colMeans(y_singlesims))
results
results <- rbind(results, colMeans(y_singlesims)) %>% as.data.frame()
results
results <- as.data.frame(results)
colnames(results) <- c("psi.1","true PATT", "gcomp", "ipw", "dr")
results
vary_param_plot <- function(default_params,var_name,var_seq,nsim){
x <- var_seq
results <- matrix(NA,nrow = 0, ncol = 5)
for (i in 1:length(x)){
default_params[var_name] <- x[i]
y_singlesims <- matrix(NA,nrow = 0, ncol = 5)
for (j in 1:nsim){
df <- make_regions(default_params)
y_singlesims <- rbind(y_singlesims, c(x[i],true_patt(df),estimate_patt(df)))
}
results <- rbind(results, colMeans(y_singlesims))
}
results <- as.data.frame(results)
colnames(results) <- c("psi.1","true PATT", "gcomp", "ipw", "dr")
return(results)
}
vary_param_plot(global_params,"psi.1",seq(-.1,.1,.1), nsim=5)
df <- make_regions(default_params)
estimate_patt(df)
estimate_patt(make_regions(default_params))
estimate_patt(make_regions(default_params))
estimate_patt(make_regions(default_params))
estimate_patt(make_regions(default_params))
set.seed(1)
set.seed(1)
estimate_patt(make_regions(default_params))
estimate_patt(make_regions(default_params))
results
# Plot estimated and true PATT across variation of a single parameter
sim_plot_patt <- function(default_params,var_name,var_seq,nsim){
x <- var_seq
results <- matrix(NA,nrow = 0, ncol = 5)
for (i in 1:length(x)){
default_params[var_name] <- x[i]
y_singlesims <- matrix(NA,nrow = 0, ncol = 5)
for (j in 1:nsim){
df <- make_regions(default_params)
y_singlesims <- rbind(y_singlesims, c(x[i],true_patt(df),estimate_patt(df)))
}
results <- rbind(results, colMeans(y_singlesims))
}
results <- as.data.frame(results)
colnames(results) <- c("psi.1","true", "gcomp", "ipw", "dr")
return(results)
}
results <- sim_plot_patt(global_params,"psi.1",c(-.1,0,.1),nsim=5)
results
# Basic density plot with custom color
df %>%
ggplot( aes(x=U, color=factor(S, levels = c("0","1")),fill=factor(S, levels = c("0","1")))) +
geom_density()
# Basic density plot with custom color
df %>%
ggplot( aes(x=U, color=factor(S, levels = c("0","1")),fill=factor(S, levels = c("0","1")))) +
geom_density(alpha=.3)
library("reshape2")
results <- sim_plot_patt(global_params,"psi.1",c(-.1,0,.1),nsim=5)
results
global_params
results_long <- melt(results, id = "psi.1")
plot_patt <- ggplot(results_long,
aes(x = x,
y = value,
color = variable)) +  geom_line()
plot_patt
results_long <- melt(results, id = "psi.1")
plot_patt <- ggplot(results_long,
aes(x = "psi.1",
y = value,
color = variable)) +  geom_line()
plot_patt
gfg_data <- data.frame(x = c(1,2,3,4,5,6,7,8,9,10),
y1 = c(1.1,2.4,3.5,4.1,5.9,6.7,
7.1,8.3,9.4,10.0),
y2 = c(7,5,1,7,4,9,2,3,1,4),
y3 = c(5,6,4,5,1,8,7,4,5,4),
y4 = c(1,4,8,9,6,1,1,8,9,1),
y5 = c(1,1,1,3,3,7,7,10,10,10))
data_long <- melt(gfg_data, id = "x")
gfg_plot <- ggplot(data_long,
aes(x = x,
y = value,
color = variable)) +  geom_line()
gfg_plot
data_long
results_long
gfg_plot
data_long
plot_patt
gfg_plot
plot_patt <- ggplot(results_long,
aes(x = psi.1,
y = value,
color = variable)) +  geom_line()
plot_patt
plot_patt <- ggplot(results_long,
aes_(x = psi.1,
y = value,
color = variable)) +  geom_line()
plot_patt <- ggplot(results_long,
aes(x = as.name("psi.1"),
y = value,
color = variable)) +  geom_line()
plot_patt
results <- sim_plot_patt(global_params,"psi.1",c(-.1,0,.1),nsim=5)
results_long <- melt(results, id = "psi.1")
results_long
plot_patt <- ggplot(results_long,
aes(x = as.name("psi.1"),
y = value,
color = variable)) +  geom_line()
plot_patt
results_long <- melt(results, id = "psi.1")
results_long
plot_patt <- ggplot(results_long,
aes(x = !!"psi.1",
y = value,
color = variable)) +  geom_line()
plot_patt
results_long <- melt(results, id = "psi.1")
results_long
plot_patt <- ggplot(results_long,
aes(x = !!enquo("psi.1"),
y = value,
color = variable)) +  geom_line()
results_long <- melt(results, id = var)
var <- "psi.1"
results_long <- melt(results, id = var)
results_long
plot_patt <- ggplot(results_long,
aes(x = var,
y = value,
color = variable)) +  geom_line()
plot_patt
results_long
var <-enquo(var)
plot_patt <- ggplot(results_long,
aes(x = !!var,
y = value,
color = variable)) +  geom_line()
plot_patt
var <- "psi.1"
plot_patt <- ggplot(results_long,
aes(x = get(var),
y = value,
color = variable)) +  geom_line()
plot_patt
# Plots the results of sim_patt
plot_patt <- function(results, var_name){
results_long <- melt(results, id = var_name)
plot_patt <- ggplot(results_long,
aes(x = get(var_name),
y = value,
color = variable)) +  geom_line()
return(plot_patt)
}
plot_patt(results)
plot_patt(results, var_name = "psi.1")
ln(1)
log(1)
log(2.7)
log(exp(1))
log(a)
a <- c(1,2,3)
log(a)
log(p)
p <- c(.2,.3)
log(p)
log(p/(1-p))
log( (p*(1-q))/(q*(1-p)) )
p <- c(.2,.3)
q <- .3
log( (p*(1-q))/(q*(1-p)) )
p <- c(0.345, 0.353)
log(p/(1-p))
q <- .310
log( (p*(1-q))/(q*(1-p)) )
p <- c(0.323,0.331)
log(p/(1-p))
p <- c(0.323,0.331)
log(p/(1-p))
q <- 0.316
log( (p*(1-q))/(q*(1-p)) )
p <- c( 0.728)
log(p/(1-p))
p <- c( .107)
log(p/(1-p))
q <- c(0.080, 0.121)
log( (p*(1-q))/(q*(1-p)) )
p <- c( .107)
log(p/(1-p))
q <- c(0.045, 0.075)
log( (p*(1-q))/(q*(1-p)) )
p <- c( 0.081 )
log(p/(1-p))
p <- c( .107)
log(p/(1-p))
q <- c(0.081 )
log( (p*(1-q))/(q*(1-p)) )
p <- c( .075)
log(p/(1-p))
p <- c( .075)
log(p/(1-p))
q <- c(0.06 )
log( (p*(1-q))/(q*(1-p)) )
p <- c( .075)
log(p/(1-p))
q <- c(0.06 )
log( (p*(1-q))/(q*(1-p)) )
p <- c( .075)
log(p/(1-p))
q <- c(0.065 )
log( (p*(1-q))/(q*(1-p)) )
p <- c( .141)
log(p/(1-p))
q <- c(0.2693 )
log( (p*(1-q))/(q*(1-p)) )
p <- c( 0.122)
log(p/(1-p))
q <- c(0.3089 )
log( (p*(1-q))/(q*(1-p)) )
p <- c( .107)
log(p/(1-p))
q <- c(0.045, 0.075)
log( (p*(1-q))/(q*(1-p)) )
p <- c( .075)
p <- c( .075)
log(p/(1-p))
p <- c( .1)
log(p/(1-p))
q <- c(0.15)
log( (p*(1-q))/(q*(1-p)) )
sumstats <- global_params %>% group_by(scenario) %>%
nest() %>% mutate(simdat=map(data,make_regions)) %>%
unnest(cols=c(data,simdat)) %>%
mutate(group=factor(S,levels=c('1','0'),labels=c('Sample','Target')),
trt=factor(A,levels=c('0','1'),labels=c('Untreated','Treated'))) %>%
group_by(scenario,group,trt) %>%
summarize(pct.Black=mean(b),participation=mean(A),ssp.sys=mean(W==1),
ssp.indep=mean(W==2),non.sys=mean(W==3),non.indep=mean(W==4))
global_params %>% group_by(scenario)
## Combine params that vary and params that are fixed
global_params <- data.frame(
x1.r = -.6, x2.r = -.7, phi.1=.17, phi.2=.04,
q= -2.12, om.1= .1, om.2= .6, om.3= c(-.3,0,.3),
H = 0, sigma.H = .02, psi.1=-.03,
theta.P = -76, sigma.P = 69,gamma.3=-92,gamma.4 = 206, gamma.5 = -87,
beta.0 = -2.51, beta.3=0, beta.4 = -.809,
beta.5 = -1.17, beta.6 = c(-.46,0,.46),
alpha.0 = 10100, alpha.1 = 46500 ,
alpha.2 = 600, alpha.3 = 12,
P= 50
) %>%
mutate(scenario=1:9)
## Making figures from simulation output
library(tidyverse)
## Making figures from simulation output
library(tidyverse)
source("HSR_simulation_fn.R")
getwd()
setwd("/Users/alyssachen/Desktop/Projects/target-practice")
source("HSR_simulation_fn.R")
## Making figures from simulation output
library(tidyverse)
source("HSR_simulation_fn.R")
## Combine params that vary and params that are fixed
global_params <- data.frame(
x1.r = -.6, x2.r = -.7, phi.1=.17, phi.2=.04,
q= -2.12, om.1= .1, om.2= .6, om.3= c(-.3,0,.3),
H = 0, sigma.H = .02, psi.1=-.03,
theta.P = -76, sigma.P = 69,gamma.3=-92,gamma.4 = 206, gamma.5 = -87,
beta.0 = -2.51, beta.3=0, beta.4 = -.809,
beta.5 = -1.17, beta.6 = c(-.46,0,.46),
alpha.0 = 10100, alpha.1 = 46500 ,
alpha.2 = 600, alpha.3 = 12,
P= 50
) %>%
mutate(scenario=1:9)
# Parameter calibration
# Proportion Black benes, SSP, system, and treated in CPC+ and non-CPC+ regions
attributes_by_S <- df %>%
group_by(S) %>%
summarise("P(B=1 | S)" = mean(b),
"P(SSP | S)" = mean(X1),
"P(system | S)" = mean(X2),
"P(A | S)" = mean(A)
)
# proportion Black in CPC+ and non-CPC+ participants within CPC+ regions
race_by_participation <- df %>%
filter(S==1) %>%
group_by(A) %>%
summarise("P(B=1 | S=1,A)" = mean(b)
)
# Proportion treated in SSP, in system, and overall
prop_treated <- bind_cols(
(
df %>%
filter(S==1,X1==1) %>%
summarise(prop_SSP_treated = mean(A)) ),
(
df %>%
filter(S==1,X2==1) %>%
summarise(prop_sys_treated = mean(A)) ),
(
df %>% summarise(prop_treated = mean(A))
)
) %>%
`colnames<-`(c("P(A=1 | SSP=1, S=1)", "P(A=1 | sys=1, S=1)", "P(A=1)"))
knitr::kable(attributes_by_S, caption = "B, SSP, System, and A by CPC+ or non-CPC+ region")
knitr::kable(race_by_participation, caption = "Race by CPC+ Participation")
knitr::kable(prop_treated, caption = "Proportion of CPC+ Participation (in SSP, System, and Overall)")
p <- c(0.2693)
log(p/(1-p))
q <- c(.141)
log( (p*(1-q))/(q*(1-p)) )
p <- c(0.3089)
log(p/(1-p))
q <- c(.122)
log( (p*(1-q))/(q*(1-p)) )
p <- c(.15)
log(p/(1-p))
q <- c(.1)
log( (p*(1-q))/(q*(1-p)) )
prop_treated <- bind_cols(
(
df %>%
filter(S==1,X1==0) %>%
summarise(prop_SSP_treated = mean(A)) ),
(
df %>%
filter(S==1,X1==1) %>%
summarise(prop_sys_treated = mean(A)) ),
(
df %>%
filter(S==1,X2==0) %>%
summarise(prop_SSP_treated = mean(A)) ),
(
df %>%
filter(S==1,X2==1) %>%
summarise(prop_sys_treated = mean(A)) )
) %>%
`colnames<-`(c("P(A=1 | SSP=0, S=1)", "P(A=1 | SSP=1, S=1)", "P(A=1| sys=0, S=1)", "P(A=1 | sys=1, S=1)"))
knitr::kable(attributes_by_S, caption = "B, SSP, System, and A by CPC+ or non-CPC+ region")
knitr::kable(race_by_participation, caption = "Race by CPC+ Participation")
knitr::kable(prop_treated, caption = "Proportion of CPC+ Participation by System/SSP status")
source("HSR_simulation_fn.R", local = knitr::knit_global())
df <- make_regions(global_params)
head(df, 2)
dim(df)
df <- tibble::as_tibble(df)
estimate_patt(df)
true_patt(df)
# Parameter calibration
# Proportion Black benes, SSP, system, and treated in CPC+ and non-CPC+ regions
attributes_by_S <- df %>%
group_by(S) %>%
summarise("P(B=1 | S)" = mean(b),
"P(SSP | S)" = mean(X1),
"P(system | S)" = mean(X2),
"P(A | S)" = mean(A)
)
# proportion Black in CPC+ and non-CPC+ participants within CPC+ regions
race_by_participation <- df %>%
filter(S==1) %>%
group_by(A) %>%
summarise("P(B=1 | S=1,A)" = mean(b)
)
# Proportion treated in SSP, in system, and overall
prop_treated <- bind_cols(
(
df %>%
filter(S==1,X1==0) %>%
summarise(prop_SSP_treated = mean(A)) ),
(
df %>%
filter(S==1,X1==1) %>%
summarise(prop_sys_treated = mean(A)) ),
(
df %>%
filter(S==1,X2==0) %>%
summarise(prop_SSP_treated = mean(A)) ),
(
df %>%
filter(S==1,X2==1) %>%
summarise(prop_sys_treated = mean(A)) )
) %>%
`colnames<-`(c("P(A=1 | SSP=0, S=1)", "P(A=1 | SSP=1, S=1)", "P(A=1| sys=0, S=1)", "P(A=1 | sys=1, S=1)"))
knitr::kable(attributes_by_S, caption = "B, SSP, System, and A by CPC+ or non-CPC+ region")
knitr::kable(race_by_participation, caption = "Race by CPC+ Participation")
knitr::kable(prop_treated, caption = "Proportion of CPC+ Participation by System/SSP status")
